---
const samples: Array<{ value: string; delimiter?: string }> = [
  { value: "Hello World!" },
  { value: "cat Hello\\ World!" },
  { value: "find this [site: sample.com]" },
  { value: "run --parem=$(other run)" },
  { value: "1,2,3,(4,5,6,7),8,9", delimiter: "," },
  { value: `1,2,3,"4,5,6,7",8,9`, delimiter: "," },
  { value: `1,2,3,"4,\\"5,6,7",8,9`, delimiter: "," },
  { value: `1,2\\,3,4`, delimiter: "," },
  { value: "podman run [options] IMAGE [COMMAND [ARG...]]" },
  { value: "docker run [OPTIONS] IMAGE [COMMAND] [ARG...]" },
];
---

<script>
  import { splitgPackage } from "../scripts/splitg-package";
  import { splitg } from "@jondotsoy/splitg";

  function getQuerySearchQ() {
    try {
      return new URL(globalThis.location.href).searchParams.get("q");
    } catch {
      return null;
    }
  }

  function getQuerySearchD() {
    try {
      return new URL(globalThis.location.href).searchParams.get("d");
    } catch {
      return null;
    }
  }

  function setQuerySearchQ(value: string) {
    try {
      const newURL = new URL(globalThis.location.href);
      newURL.searchParams.set("q", value);

      globalThis.history.pushState({}, "", newURL);
    } catch {}
  }

  function setQuerySearchD(value: undefined | string) {
    try {
      const newURL = new URL(globalThis.location.href);

      if (value) newURL.searchParams.set("d", value);
      else newURL.searchParams.delete("d");

      globalThis.history.pushState({}, "", newURL);
    } catch {}
  }

  class Selector {
    constructor(
      readonly context: HTMLElement,
      readonly selector: string,
    ) {}

    private node() {
      const node = this.context.querySelector(
        `[x-selector=${JSON.stringify(this.selector)}]`,
      );
      return node;
    }

    private nodeInput() {
      const node = this.node();
      if (!(node instanceof HTMLInputElement)) return null;
      return node;
    }

    addOnChangeEventListener(listener: (event: Event) => void) {
      this.nodeInput()?.addEventListener("change", listener);
      this.nodeInput()?.addEventListener("keyup", listener);
      return () => {
        this.nodeInput()?.removeEventListener("change", listener);
        this.nodeInput()?.removeEventListener("keyup", listener);
      };
    }

    getValue() {
      return this.nodeInput()?.value;
    }

    setValue(value: string) {
      const node = this.nodeInput();
      if (!node) return;
      node.value = value;
    }

    setInnerHTML(html: string) {
      const node = this.node();
      if (!node) return;
      node.innerHTML = html;
    }
    setTextContent(html: string) {
      const node = this.node();
      if (!node) return;
      node.textContent = html;
    }
  }

  class InputSplitg extends HTMLElement {
    showResult = new Selector(this, "showresult");
    jsSample = new Selector(this, "jssample");
    input = new Selector(this, "input");
    inputDelimiter = new Selector(this, "input-delimiter");

    connectedCallback() {
      const initialValue = getQuerySearchQ();
      const initialDelimiter = getQuerySearchD();
      if (initialValue) this.input.setValue(initialValue);
      if (initialDelimiter) this.inputDelimiter.setValue(initialDelimiter);
      this.input.addOnChangeEventListener((event) => {
        event.preventDefault();
        this.evaluate();
      });
      this.inputDelimiter.addOnChangeEventListener((event) => {
        event.preventDefault();
        this.evaluate();
      });
      this.evaluate();
    }

    disconnectedCallback() {}

    setValue(value: string, delimiter?: string) {
      this.input.setValue(value);
      this.inputDelimiter.setValue(delimiter ?? "");
      this.evaluate();
    }

    evaluate() {
      const value = this.input.getValue() ?? "";
      const delimiter = this.inputDelimiter.getValue();
      const parts = splitg(value, delimiter);
      this.showResult.setTextContent(JSON.stringify(parts, null, 2));
      this.jsSample.setTextContent(
        `import { splitg } from "@jondotsoy/splitg"; // version: ${splitgPackage.version} \n\n` +
          `const parts = splitg(${JSON.stringify(value)}${delimiter ? `, ${JSON.stringify(delimiter)}` : ""})\n` +
          JSON.stringify(parts, null, 2)
            .split("\n")
            .map((line, index) => `//${index === 0 ? " => " : " "}${line}\n`)
            .join(""),
      );
      setQuerySearchQ(value);
      setQuerySearchD(delimiter);
    }
  }

  class SampleButton extends HTMLElement {
    connectedCallback() {
      const findParentInputSplitg = (from: HTMLElement): null | InputSplitg => {
        if (from.parentElement instanceof InputSplitg)
          return from.parentElement;
        if (from.parentElement)
          return findParentInputSplitg(from.parentElement);
        return null;
      };
      const parentInputSplitg = findParentInputSplitg(this);

      this.addEventListener("click", (event) => {
        const value = this.dataset.value;
        const delimiter = this.dataset.delimiter;
        if (value) parentInputSplitg?.setValue(value, delimiter);
      });
    }
  }

  customElements.define("input-splitg", InputSplitg);
  customElements.define("sample-button", SampleButton);
</script>

<input-splitg class="w-full">
  <div class="grid grid-cols-[3fr_1fr] gap-2">
    <input
      type="text"
      x-selector="input"
      placeholder="hello world!"
      value="hello world!"
      class="border px-4 py-2 rounded shadow w-full mb-1"
    />
    <input
      type="text"
      placeholder="Dellimiter"
      x-selector="input-delimiter"
      class="border px-4 py-2 rounded shadow w-full mb-1"
    />
  </div>
  <div class="text-sm opacity-55">Samples:</div>
  <div
    class="mb-3 flex flex-wrap gap-2 max-w-full py-4 [&>sample-button]:border [&>sample-button]:text-sm [&>sample-button]:px-2 [&>sample-button]:py-0 rounded [&>sample-button]:bg-gray-100 [&>sample-button]:cursor-pointer [&>sample-button]:max-w-full"
  >
    {
      samples.map((sample) => (
        <sample-button
          data-value={sample.value}
          data-delimiter={sample.delimiter}
        >
          {sample.value}
        </sample-button>
      ))
    }
  </div>
  <div class="">
    <pre
      class="px-4 overflow-auto py-2 mb-4 bg-gray-500 text-white border font-mono"><code x-selector="showresult" /></pre>
    <pre
      class="px-4 overflow-auto py-2 bg-gray-500 text-white border font-mono"><code x-selector="jssample" /></pre>
  </div>
</input-splitg>

<datalist id="delimiter-list">
  <option value="">Space</option>
  <option value=",">,</option>
  <option value="~">~</option>
  <option value="/">/</option>
</datalist>
